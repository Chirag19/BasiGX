Ext.data.JsonP.BasiGX_util_Object({"tagname":"class","name":"BasiGX.util.Object","autodetected":{"aliases":true,"alternateClassNames":true,"extends":true,"mixins":true,"requires":true,"uses":true,"members":true,"code_type":true},"files":[{"filename":"Object.js","href":"Object.html#BasiGX-util-Object"}],"aliases":{},"alternateClassNames":[],"extends":"Ext.Base","mixins":[],"requires":["Ext.Object"],"uses":[],"members":[{"name":"getValue","tagname":"method","owner":"BasiGX.util.Object","id":"static-method-getValue","meta":{"static":true}},{"name":"getValueSpellingVariants","tagname":"method","owner":"BasiGX.util.Object","id":"static-method-getValueSpellingVariants","meta":{"static":true}},{"name":"layersFromParams","tagname":"method","owner":"BasiGX.util.Object","id":"static-method-layersFromParams","meta":{"static":true}}],"code_type":"ext_define","id":"class-BasiGX.util.Object","component":false,"superclasses":["Ext.Base"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>Ext.Base<div class='subclass '><strong>BasiGX.util.Object</strong></div></div><h4>Requires</h4><div class='dependency'>Ext.Object</div><h4>Files</h4><div class='dependency'><a href='source/Object.html#BasiGX-util-Object' target='_blank'>Object.js</a></div></pre><div class='doc-contents'><p>Object Util</p>\n\n<p>Some methods to work with an Object</p>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-getValue' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BasiGX.util.Object'>BasiGX.util.Object</span><br/><a href='source/Object.html#BasiGX-util-Object-static-method-getValue' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BasiGX.util.Object-static-method-getValue' class='name expandable'>getValue</a>( <span class='pre'>queryKey, [queryObject]</span> ) : *<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Method may be used to return a value of a given input object by a\nprovided query key. ...</div><div class='long'><p>Method may be used to return a value of a given input object by a\nprovided query key. The query key can be used in two ways:\n  * Single-value: Find the first matching key in the provided object\n    (Use with caution as the object/array order may not be as\n    expected and/or deterministic!).\n  * Backslash (\"/\") separated value: Find the last (!) matching key\n    in the provided object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>queryKey</span> : String<div class='sub-desc'><p>The key to be searched.</p>\n</div></li><li><span class='pre'>queryObject</span> : Object (optional)<div class='sub-desc'><p>The object to be searched on. If not\n    provided the global application context (on root-level) will\n    be used. You should alway pass queryObject if possible, the\n    guessing of the queryObject is <em>deprecated</em>, future versions\n    might remove this behaviour.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>*</span><div class='sub-desc'><p>The target value or <code>undefined</code> if the given couldn't be\n    found.</p>\n</div></li></ul></div></div></div><div id='static-method-getValueSpellingVariants' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BasiGX.util.Object'>BasiGX.util.Object</span><br/><a href='source/Object.html#BasiGX-util-Object-static-method-getValueSpellingVariants' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BasiGX.util.Object-static-method-getValueSpellingVariants' class='name expandable'>getValueSpellingVariants</a>( <span class='pre'>obj, commonVariants, variantRe</span> ) : *<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Returns the value of a key in the passed object, when we do not know\nexactly how the key was spelled (e.g. ...</div><div class='long'><p>Returns the value of a key in the passed object, when we do not know\nexactly how the key was spelled (e.g. with regard to casing). This\ncan be useful, if the object contains key-value-pairs which\nrepresent URL-parameters. With this method you can e.g. find LAYERS,\nlayers and any other casing (by providing a regular expression) in an\nobject that represents common WMS query paramers like the ones from\n<code>wmsSource.getParams()</code>.</p>\n\n<p>Example:</p>\n\n<pre><code>var params = wmsSource.getParams();\nvar layers = <a href=\"#!/api/BasiGX.util.Object-static-method-getValueSpellingVariants\" rel=\"BasiGX.util.Object-static-method-getValueSpellingVariants\" class=\"docClass\">BasiGX.util.Object.getValueSpellingVariants</a>(\n    params, ['LAYERS', 'layers'], /^layers$/i\n);\n// layers now contains the value of e.g. params.LAYERS,\n// params.layers or params.LaYeRs\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>obj</span> : Object<div class='sub-desc'><p>The object in which the key whose spelling is\n    unclear will be looked up. Required.</p>\n</div></li><li><span class='pre'>commonVariants</span> : String[]<div class='sub-desc'><p>An array of strings with common\n    variants of the key, these will be looked up first and in order.\n    At least <code>commonVariants</code> or <code>variantRe</code> must be passed. You can\n    pass both. If one of the keys herein is existing in <code>obj</code>, we'll\n    return the value at that key and will not make use of the regular\n    expression in <code>variantRe</code>.</p>\n</div></li><li><span class='pre'>variantRe</span> : RegExp<div class='sub-desc'><p>A regular expression matching the key of\n    which we do not know the spelling. At least <code>variantRe</code> or\n    <code>commonVariants</code> must be passed. You can pass both. If a common\n    variant exists in <code>obj</code>, this will not be considered. Otherwise\n    the <em>first</em> key in <code>obj</code> that matches the regular expression will\n    be used.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>*</span><div class='sub-desc'><p>The value stored in <code>obj</code> at the first variant of the key\n    that matched.</p>\n</div></li></ul></div></div></div><div id='static-method-layersFromParams' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='BasiGX.util.Object'>BasiGX.util.Object</span><br/><a href='source/Object.html#BasiGX-util-Object-static-method-layersFromParams' target='_blank' class='view-source'>view source</a></div><a href='#!/api/BasiGX.util.Object-static-method-layersFromParams' class='name expandable'>layersFromParams</a>( <span class='pre'>params</span> ) : *<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>A utility method to get the layers-key from an object which\nrepresents URL params. ...</div><div class='long'><p>A utility method to get the layers-key from an object which\nrepresents URL params. Will first try the keys <code>LAYERS</code>, then\n<code>layers</code> and finally all sorts of mixed casing spellings like\n<code>lAyERs</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>params</span> : Object<div class='sub-desc'><p>The object to look in.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>*</span><div class='sub-desc'><p>The value for the layers key in the first matched casing\n    variant</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});